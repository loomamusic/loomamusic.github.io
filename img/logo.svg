<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1700.26 225.12">
    <defs>
        <clipPath id="clip">
            <circle cx="100" cy="100" r="100"/>
        </clipPath>

        <style>
            .char {
                transform-box: fill-box;
                transform-origin: center;
                position: absolute;
                transition-duration: 800ms;
                /* filter: url(#dabadee); */
            }
        </style>
    </defs>

<filter id="dabadee">
<feColorMatrix 
    type="matrix" 
    values="0 0 0 0 0
            0 0 0 0 0
            1 1 1 0 0
            0 0 0 1 0">
</feColorMatrix>
</filter>

<g id="content">
    <g id="characters-0">
        <path class="char"
            d="M558.67,0C586.91,2.06,615,12.1,625.61,40.76a61.32,61.32,0,0,1,4.1,17.4c.85,17.11.33,34.28.44,51.41,0,17.4.29,34.8-.14,52.19,0,21.75-12.07,43-31.87,52.8-13,6.79-27.74,9.71-42.37,9.95-25.24.66-50.5.4-75.75.43H421.6c-33.17-.64-71.06,5-98.51-17.83a58.36,58.36,0,0,1-19.81-36.53c-.85-6.53-.66-13.19-.85-19.8,0-15.43.13-30.73-.09-46.22.1-13.81,0-27.67.12-41.46.79-30.52,20.33-53.28,50.06-59.7C359.59,2.12,366.68.56,373.86,0ZM366.73,67.17a4.71,4.71,0,0,1,.41,1.32c0,24.09-.09,48.19.07,72.27.38,9.11-2.75,28,7.73,32a35.26,35.26,0,0,0,9.73,2c22.55.33,45.2-.06,67.74,0,27.87,0,55.77,0,83.64-.05,5.91,0,11.87.64,17.72-.72,10.86-2.1,11.46-11.23,11.73-20.7.13-19.36-.19-38.72.3-58.08,0-3.32-.24-6.65-.34-10-.25-7.8.71-15.65-.78-23.4-1.46-9.53-9.32-12.13-17.95-12.17-25.59-.29-55.93.08-81.57-.14-21.92.12-43.81,0-65.73.16-7.55.13-24.91-1.78-28.83,5.87a62.39,62.39,0,0,0-3,8.38A26.14,26.14,0,0,0,366.73,67.17Z" />
        <path class="char"
            d="M900.61,0,907,.7c30.14,2.65,57.24,18.54,63.69,49.76,2,8.75,1.42,17.64,1.44,26.49q.08,42.9,0,85.84c-1.92,35.46-25,55.14-58.91,60.3A86.62,86.62,0,0,1,900,224.53c-16.8.26-33.61.33-50.42.39-26.91,0-81.26,0-108.85.05-6.16,0-12.34.26-18.49-.07-6.73-.36-13.44-1.14-20.13-2a78.2,78.2,0,0,1-18.76-5.12c-18.15-6.9-32.92-22.72-36.77-42a68,68,0,0,1-1.78-13.92c-.41-30.63-.35-61.24-.47-91.87-.82-36.68,19.32-61,55.25-67.81,5-.84,10.22-1.2,15.37-1.89A3.6,3.6,0,0,0,715.8,0ZM808.41,174.8h0c14.79,0,59.75,0,75.27,0,4.4,0,8.77.06,13.13-1,5.21-1.3,8.43-4.49,9.52-9.5a57.64,57.64,0,0,0,1.3-12q.18-29.39,0-58.77c0-10.11.66-20.25-.74-30.31-.67-4.83-2.29-9.41-7.27-11.26A32.26,32.26,0,0,0,889,49.82q-63.6-.37-127.21,0c-13.28.12-26.6-.94-39.85.71-5.46.68-9.74,3.31-11.17,8.83A69.37,69.37,0,0,0,709.1,71.4q-.26,34.82-.06,69.71c.11,6.93.26,13.87.82,20.78.33,4,1.8,7.72,5.52,10a20.29,20.29,0,0,0,10.82,2.86C748.44,174.84,785.74,174.71,808.41,174.8Z" />
        <path class="char"
            d="M1339.1,0a47,47,0,0,1,5.43,1.74c9.25,4.23,13.69,11.57,13.69,21.65V164.65q0,25.2.08,50.39c0,3.14-.19,6.23-3.09,8.11a9.46,9.46,0,0,1-4.74,1.76c-16.37.13-32.74.08-49.11.08a7.91,7.91,0,0,1-7.89-7.73v-141c-2.52,1.8-4.73,3.34-6.89,4.94-6.51,4.8-13,9.64-19.51,14.44Q1248.53,109.34,1230,123c-11.12,8.19-22.31,16.29-33.36,24.58-5.2,3.9-10.62,7.37-17,8.75a32.16,32.16,0,0,1-20.86-2.13c-6.2-2.89-11.32-7.29-16.75-11.25q-16.17-11.78-32.25-23.67l-23-16.94L1055.1,79l-3.65-2.69v8.06q0,43.58.07,87.13V217.4a7.8,7.8,0,0,1-7.52,7.51H994.32a8.09,8.09,0,0,1-7.65-7.83q.06-18.47,0-36.94V68.35c0-15.55-.17-31.1,0-46.65A21.79,21.79,0,0,1,1004.91.34a4,4,0,0,0,.83-.33h10.1a60.65,60.65,0,0,1,19,9.42q18.67,13.65,37.3,27.36,13.13,9.63,26.27,19.24,14.44,10.53,28.91,21c6.22,4.55,12.4,9.16,18.63,13.69s12.24,9.23,18.7,13.31c5.15,3.25,10.84,3.44,16.06-.26,8.11-5.76,16.12-11.65,24.15-17.52,7.27-5.32,14.48-10.72,21.76-16,9.4-6.84,18.86-13.59,28.25-20.43s18.52-13.62,27.79-20.42c8.07-5.92,16.21-11.74,24.22-17.75,6.67-5,13.64-9.35,21.74-11.65Z" />
        <path class="char"
            d="M1541.86,0c7.35,2.09,11.7,7.66,15.84,13.52,5.62,8,11.3,15.87,16.94,23.82,11.76,16.76,23.71,33.41,35.56,50.11q36.18,51.35,72.67,102.46,7.73,10.85,15.37,21.74c2.92,4.16,2.72,8.12-.9,11.3a8.33,8.33,0,0,1-5,1.91c-17.76.17-35.51.07-53.26.1-3.1.14-5.34-1.34-7.1-3.69-6.19-8.26-12.35-16.55-18.58-24.78a2.34,2.34,0,0,0-1.7-.65c-31.31-.12-62.61-.22-93.91-.06-23.7,0-47.43.08-71.11,0-2.19-.18-3.35.9-4.38,2.4-5.12,7.47-10.14,15-15.34,22.43a9.59,9.59,0,0,1-8.49,4.45c-12.7-.18-25.39-.09-38.09-.08a7.44,7.44,0,0,1-6.58-3.83,7,7,0,0,1,.3-8.15c24.09-35.85,48.88-71.23,73-107.1,18.42-26.92,41.41-61,60-88C1513.4,9.2,1521.48,2.2,1532.51,0Zm-17.53,76.4-50.23,69.21h102.38Z" />
        <path class="char"
            d="M58.84,0a22.09,22.09,0,0,1,4.08,2.91,6.92,6.92,0,0,1,1.83,4c.22,42.71-.36,85.43,0,128.14,0,7.27-.19,14.55,0,21.82.14,4.08.68,8.25,3,11.83,2.51,3.87,6.47,5.43,10.76,5.67,7.11.41,14.25.4,21.37.46,36.72.2,73.49,0,110.22.09,26.94,0,53.88-.19,80.82,0,3.75,0,7.36,3.06,7.48,6.63.2,9.43-.08,18.88,0,28.32,0,2.32-.59,4.73-.15,6.94a5.8,5.8,0,0,1-2.4,6.09,9.18,9.18,0,0,1-5,2q-85.74.17-171.55.14H77a164.45,164.45,0,0,1-19.09-2C25.9,218.32,1.12,197,.6,163.25c0-.22-.39-.41-.6-.61V6C1.1,3,3.37,1.28,6.1,0Z" />
    </g>
</g>
<!-- <image height="100%" preserveAspectRatio="xMinYMin slice" width"100%" xlink:href="./img/Background.jpg" clip-path="url(#clip)" /> -->

    <script type="text/javascript">
        // <![CDATA[

        const container0 = document.getElementById("characters-0");
        
        const container1 = container0.cloneNode(true);
        container1.setAttribute("id", "characters-1");
        document.getElementById("content").appendChild(container1)
        container1.style.fill = "red";
        
        const container2 = container0.cloneNode(true);
        container2.setAttribute("id", "characters-2");
        document.getElementById("content").appendChild(container2)
        container2.style.fill = "#ed87dc";

        const { innerWidth, innerHeight } = window;

        const LOGO_CHARACTERS = document.getElementById("characters-0").getElementsByTagName("path");
        const logoLayers = new Map();
        logoLayers.set(0,document.getElementById("characters-0").getElementsByTagName("path"));
        logoLayers.set(1,document.getElementById("characters-1").getElementsByTagName("path"));
        logoLayers.set(2,document.getElementById("characters-2").getElementsByTagName("path"));

        function layerGlitchEffect(paths, transform, fill) {
            for(const path of paths) {
                path.transform = transform;
                path.fill = fill;
            }
        }
        
        function euclidianDistance(x1, y1, x2, y2) {
            return Math.sqrt( Math.pow((x1-x2), 2) + Math.pow((y1-y2), 2) );
        }

        function hslToHex(h, s, l) {
            h /= 360;
            s /= 100;
            l /= 100;
            let r, g, b;
            if (s === 0) {
                r = g = b = l; // achromatic
            } else {
                const hue2rgb = (p, q, t) => {
                if (t < 0) t += 1;
                if (t > 1) t -= 1;
                if (t < 1 / 6) return p + (q - p) * 6 * t;
                if (t < 1 / 2) return q;
                if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
                return p;
            };
            const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
            const p = 2 * l - q;
            r = hue2rgb(p, q, h + 1 / 3);
            g = hue2rgb(p, q, h);
            b = hue2rgb(p, q, h - 1 / 3);
            }

            const toHex = x => {
                const hex = Math.round(x * 255).toString(16);
                return hex.length === 1 ? '0' + hex : hex;
            };
            return `#${toHex(r)}${toHex(g)}${toHex(b)}`;
        }

        const CHAR_MAP = new Map();

        for (const char of LOGO_CHARACTERS) {
            CHAR_MAP.set(char, char.getBoundingClientRect());
        }

        function mouseChange(mouseX, mouseY) {
            const xNorm = mouseX / innerWidth;
            const yNorm = mouseY / innerHeight;

            const sizes = [];
            for(const c of LOGO_CHARACTERS) {
                sizes.push(c.transform);
            }
            
            for (const char of LOGO_CHARACTERS) {

                const { x, y, height, width } = CHAR_MAP.get(char);

                const dist = euclidianDistance(x + (width/2), y + (height/2), mouseX, mouseY);

                var normDist = dist / Math.sqrt(innerHeight * innerWidth);
                //console.log(normDist);
                //char.style.fill = hslToHex(Math.floor(normDist*100), 100, 50);
                normDist += 0.4
                if(normDist > .8) normDist = 1;
                else if(normDist < .6) normDist = .6;
                char.setAttribute('transform', `scale(${Math.sqrt(normDist)})`);
                
            }

            //logoLayers.forEach((layer, index)=>)

            
        }

        window.onmousemove = (event) => { 
            const { clientX, clientY } = event;
            mouseChange(clientX, clientY);
        }
        // ]]>
    </script>
</svg>